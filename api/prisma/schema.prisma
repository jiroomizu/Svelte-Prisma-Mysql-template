generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique @default("")
  name      String    @default("")
  avatar    String?   @default("")
  password  String?   @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  lastLogIn DateTime?
  posts     Post[]
}

model Post {
  id         Int                 @id @default(autoincrement())
  title      String              @default("")
  link       String              @default("")
  content    String?             @db.MediumText
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @default(now()) @updatedAt
  authorId   Int
  author     User                @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tags       TagsOnPosts[]
  categories CategoriesOnPosts[]
}

// Below, Tag and Category are basically same models.
// I thought about adding "type" for grouping in Tag model,
// to make it usable for general texts like tag/categories/badges...etc.
// But I think adding same structures is more easy to organise,
// rather than making a bit more complex model(s).
model Tag {
  id        Int           @id @default(autoincrement())
  name      String        @unique @default("") @db.VarChar(255)
  sortOrder Int           @default(100) @db.SmallInt
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  posts     TagsOnPosts[]
}

// A relation model for "many to many"
model TagsOnPosts {
  id         Int      @id @default(autoincrement())
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId     Int?
  tag        Tag?     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId      Int?
  createdAt  DateTime @default(now())
  assignedBy Int
}

model Category {
  id        Int                 @id @default(autoincrement())
  name      String              @unique @default("") @db.VarChar(255)
  sortOrder Int                 @default(100) @db.SmallInt
  createdAt DateTime            @default(now())
  updatedAt DateTime            @default(now()) @updatedAt
  posts     CategoriesOnPosts[]
}

// A relation model for "many to many"
model CategoriesOnPosts {
  id         Int      @id @default(autoincrement())
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId     Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId Int
  createdAt  DateTime @default(now())
  assignedBy Int
}
